// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Contacts.CommandProcessing
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContactWithTitle")]
    [NUnit.Framework.CategoryAttribute("Contacts")]
    [NUnit.Framework.CategoryAttribute("Sample")]
    [NUnit.Framework.CategoryAttribute("Commanding")]
    public partial class ContactWithTitleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContactWithTitle.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ContactWithTitle", "Contact event sourced entity to manage contact state during command to event tran" +
                    "slation", ProgrammingLanguage.CSharp, new string[] {
                        "Contacts",
                        "Sample",
                        "Commanding"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new contact without applying or appending any event")]
        public virtual void CreateANewContactWithoutApplyingOrAppendingAnyEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new contact without applying or appending any event", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("A new contact with title is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId",
                        "Version"});
            table1.AddRow(new string[] {
                        "<null>",
                        "00000000-0000-0000-0000-000000000000",
                        "0"});
#line 9
 testRunner.Then("The the following contact with title is obtained", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a contact by appending a contact created event")]
        public virtual void CreateAContactByAppendingAContactCreatedEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a contact by appending a contact created event", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("A new contact with title is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId"});
            table2.AddRow(new string[] {
                        "Iskander",
                        "5D7C247E-CBF8-4F6C-BB9B-05F9DD45FB2F"});
#line 15
 testRunner.When("A contact created event is appended", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId",
                        "Version"});
            table3.AddRow(new string[] {
                        "Iskander",
                        "5D7C247E-CBF8-4F6C-BB9B-05F9DD45FB2F",
                        "1"});
#line 18
 testRunner.Then("The the following contact with title is obtained", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Modify a contact title")]
        public virtual void ModifyAContactTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Modify a contact title", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("A new contact with title is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId"});
            table4.AddRow(new string[] {
                        "Iskander",
                        "5D7C247E-CBF8-4F6C-BB9B-05F9DD45FB2F"});
#line 24
 testRunner.When("A contact created event is appended", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId"});
            table5.AddRow(new string[] {
                        "Iskander Sierra",
                        "5D7C247E-CBF8-4F6C-BB9B-05F9DD45FB2F"});
#line 27
 testRunner.And("A contact title updated event is appended", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId",
                        "Version"});
            table6.AddRow(new string[] {
                        "Iskander Sierra",
                        "5D7C247E-CBF8-4F6C-BB9B-05F9DD45FB2F",
                        "2"});
#line 30
 testRunner.Then("The the following contact with title is obtained", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Modify a contact title twice")]
        public virtual void ModifyAContactTitleTwice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Modify a contact title twice", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("A new contact with title is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId"});
            table7.AddRow(new string[] {
                        "Iskander",
                        "5D7C247E-CBF8-4F6C-BB9B-05F9DD45FB2F"});
#line 36
 testRunner.When("A contact created event is appended", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId"});
            table8.AddRow(new string[] {
                        "Iskander Sierra",
                        "5D7C247E-CBF8-4F6C-BB9B-05F9DD45FB2F"});
#line 39
 testRunner.And("A contact title updated event is appended", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId"});
            table9.AddRow(new string[] {
                        "Iskander Sierra Zaldivar",
                        "5D7C247E-CBF8-4F6C-BB9B-05F9DD45FB2F"});
#line 42
 testRunner.And("A contact title updated event is appended", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "EntityId",
                        "Version"});
            table10.AddRow(new string[] {
                        "Iskander Sierra Zaldivar",
                        "5D7C247E-CBF8-4F6C-BB9B-05F9DD45FB2F",
                        "3"});
#line 45
 testRunner.Then("The the following contact with title is obtained", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
